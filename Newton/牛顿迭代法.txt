//经典牛顿迭代法C++实现
#include<iostream>
#include<cmath>
#define N_num 2               // 非线性方程组中方程个数、未知量个数
#define Epsilon 0.0001    // 差向量1范数的上限
#define Max     10       //最大迭代次数
using namespace std;
const int N2 = 2 * N_num;

float theta1 = -0.8, theta2 = -0.75; //theta1 ：pitch				theta2： roll

int main()
{
	void ff(float xx[N_num], float yy[N_num]); //计算向量函数的因变量向量yy[N]
	void ffjacobian(float xx[N_num], float yy[N_num][N_num]); //计算雅克比矩阵yy[N][N]
	void inv_jacobian(float yy[N_num][N_num], float inv[N_num][N_num]); //计算雅克比矩阵的逆矩阵inv
	void newdundiedai(float x0[N_num], float inv[N_num][N_num], float y0[N_num], float x1[N_num]); //由近似解向量 x0 计算近似解向量 x1

	float x0[N_num] = { 2.1,1.6 }, y0[N_num], jacobian[N_num][N_num], invjacobian[N_num][N_num], x1[N_num], errornorm;
	int i, j, iter = 0;
	
	//如果取消对x0的初始化，撤销下面两行的注释符，就可以由键盘向x0读入初始近似解向量
	//for( i=0;i<N;i++)
	//      cin>>x0[i];

	cout << "初始近似解向量：" << endl;
	for (i = 0; i < N_num; i++)
		cout << x0[i] << "  ";
	cout << endl; cout << endl;
	do
	{
		iter = iter + 1;
		cout << "第 " << iter << " 次迭代开始" << endl;

		//计算向量函数的因变量向量 y0

		ff(x0, y0);

		//计算雅克比矩阵 jacobian

		ffjacobian(x0, jacobian);

		//计算雅克比矩阵的逆矩阵 invjacobian
		inv_jacobian(jacobian, invjacobian);

		//由近似解向量 x0 计算近似解向量 x1

		newdundiedai(x0, invjacobian, y0, x1);

		//计算差向量的1范数errornorm
		errornorm = 0;
		for (i = 0; i < N_num; i++)
			errornorm = errornorm + fabs(x1[i] - x0[i]);
		if (errornorm < Epsilon) break;

		for (i = 0; i < N_num; i++)
			x0[i] = x1[i];

	} while (iter < Max);

	return 0;
}

void ff(float xx[N_num], float yy[N_num])
{
	float alfa, beita;
	int i;

	alfa = xx[0];
	beita = xx[1];

	float a = 0.178;
	float b = 0.239;
	float c = 0.09;
	float d = 0.0365;

	yy[0] = pow(d, 2) * pow((sin(beita) - 1), 2) - pow(b, 2) + pow((b - c * cos(alfa) - d * cos(beita) + c * sin(theta1)), 2)
		    + pow(c, 2) * pow((sin(alfa) - cos(theta1)), 2);
		

	yy[1] = pow(d, 2) * pow((sin(beita) - 1), 2) - pow(a, 2) + pow((a - c * cos(alfa) + d * cos(beita) + c * sin(theta2)), 2)
		    + pow(c, 2) * pow((sin(alfa) - cos(theta2)), 2);


	//yy[0] = x * x - 2 * x - y + 0.5;
	//yy[1] = x * x + 4 * y * y - 4;

	cout << "向量函数的因变量向量是： " << endl;
	for (i = 0; i < N_num; i++)
		cout << yy[i] << "  ";
	cout << endl;
	cout << endl;

}

void ffjacobian(float xx[N_num], float yy[N_num][N_num])
{
	float alfa, beita;
	int i, j;

	alfa = xx[0];
	beita = xx[1];
	//jacobian have n*n element

	float a = 0.178;
	float b = 0.239;
	float c = 0.09;
	float d = 0.0365;
	yy[0][0] = 2 * c * sin(alfa) * (b - c * cos(alfa) - d * cos(beita) + c * sin(theta1)) + 2 * pow(c, 2) * cos(alfa) * (sin(alfa) - cos(theta1));
	yy[0][1] = 2 * d * sin(beita) * (b - c * cos(alfa) - d * cos(beita) + c * sin(theta1)) + 2 * pow(d, 2) * cos(beita) * (sin(beita) - 1);
	yy[1][0] = 2 * c * sin(alfa) * (a - c * cos(alfa) + d * cos(beita) + c * sin(theta2)) + 2 * pow(c, 2) * cos(alfa) * (sin(alfa) - cos(theta2));
	yy[1][1] = 2 * pow(d, 2) * cos(beita) * (sin(beita) - 1) - 2 * d * sin(beita) * (a - c * cos(alfa) + d * cos(beita) + c * sin(theta2));



	//yy[0][0] = 2 * x - 2;
	//yy[0][1] = -1;
	//yy[1][0] = 2 * x;
	//yy[1][1] = 8 * y;

	cout << "雅克比矩阵是： " << endl;
	for (i = 0; i < N_num; i++)
	{
		for (j = 0; j < N_num; j++)
			cout << yy[i][j] << "  ";
		cout << endl;
	}
	cout << endl;
}

void inv_jacobian(float yy[N_num][N_num], float inv[N_num][N_num])
{
	float aug[N_num][N2], L;
	int i, j, k;

	cout << "开始计算雅克比矩阵的逆矩阵 ：" << endl;
	for (i = 0; i < N_num; i++)
	{
		for (j = 0; j < N_num; j++)
			aug[i][j] = yy[i][j];
		for (j = N_num; j < N2; j++)
			if (j == i + N_num) aug[i][j] = 1;
			else  aug[i][j] = 0;
	}


	for (i = 0; i < N_num; i++)
	{
		for (j = 0; j < N2; j++)
			cout << aug[i][j] << "  ";
		cout << endl;
	}
	cout << endl;


	for (i = 0; i < N_num; i++)
	{
		for (k = i + 1; k < N_num; k++)
		{
			L = -aug[k][i] / aug[i][i];
			for (j = i; j < N2; j++)
				aug[k][j] = aug[k][j] + L * aug[i][j];
		}
	}


	for (i = 0; i < N_num; i++)
	{
		for (j = 0; j < N2; j++)
			cout << aug[i][j] << "  ";
		cout << endl;
	}
	cout << endl;


	for (i = N_num - 1; i > 0; i--)
	{
		for (k = i - 1; k >= 0; k--)
		{
			L = -aug[k][i] / aug[i][i];
			for (j = N2 - 1; j >= 0; j--)
				aug[k][j] = aug[k][j] + L * aug[i][j];
		}
	}




	for (i = 0; i < N_num; i++)
	{
		for (j = 0; j < N2; j++)
			cout << aug[i][j] << "  ";
		cout << endl;
	}
	cout << endl;


	for (i = N_num - 1; i >= 0; i--)
		for (j = N2 - 1; j >= 0; j--)
			aug[i][j] = aug[i][j] / aug[i][i];

	
	for (i = 0; i < N_num; i++)
	{
		for (j = 0; j < N2; j++)
			cout << aug[i][j] << "  ";
		cout << endl;
		for (j = N_num; j < N2; j++)
			inv[i][j - N_num] = aug[i][j];
	}
	cout << endl;


	cout << "雅克比矩阵的逆矩阵： " << endl;
	for (i = 0; i < N_num; i++)
	{
		for (j = 0; j < N_num; j++)
			cout << inv[i][j] << "  ";
		cout << endl;
	}
	cout << endl;

}

void newdundiedai(float x0[N_num], float inv[N_num][N_num], float y0[N_num], float x1[N_num])
{
	int i, j;
	float sum = 0;

	for (i = 0; i < N_num; i++)
	{
		sum = 0;
		for (j = 0; j < N_num; j++)
			sum = sum + inv[i][j] * y0[j];
		x1[i] = x0[i] - sum;
	}
	cout << "近似解向量：" << endl;
	for (i = 0; i < N_num; i++)
		cout << x1[i] << "  ";	//	x1[0]电机角度1			x1[1]电机角度2
	cout << endl; cout << endl;
}